# -*- coding: utf-8 -*-
"""ID Extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnZ21HkV-L5yJgL1FiESK4NQPVrNe8_q
"""

!sudo apt update && sudo apt install -y tesseract-ocr libtesseract-dev
!pip install pytesseract



import numpy as np
import cv2
import pytesseract
import re
from google.colab.patches import cv2_imshow

# Load image
image_path = "/content/1461d3bbe2c14f64e28664aa10f6b47e.jpg"  # Update with correct filename
image = cv2.imread(image_path)

if image is None:
    print("❌ Error: Could not load the image. Check the file path!")
    exit()

# Convert to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply thresholding (improves OCR accuracy)
_, thresh1 = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)

# Show processed image
cv2_imshow(thresh1)

# Save processed image
cv2.imwrite("/content/processed_image.jpg", thresh1)

# ✅ **Prevent Tesseract from Reading Hindi (Strict English OCR)**
config = ('-l eng --oem 3 --psm 6 -c tessedit_char_whitelist="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 /" -c textord_prefer_joined_punct=0')

# Extract text from image
raw_text = pytesseract.image_to_string(thresh1, config=config)

# ✅ **Face Extraction Function**
def extract_face(image):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(50, 50))

    if len(faces) == 0:
        print("❌ No face detected on the ID!")
        return None

    for (x, y, w, h) in faces:
        face = image[y:y+h, x:x+w]
        cv2.imwrite("/content/extracted_face.jpg", face)
        print("✅ Face extracted and saved as 'extracted_face.jpg'")
        cv2_imshow(face)
        return face

    return None

# ✅ **Extract and Save Face from ID**
extracted_face = extract_face(image)

# ✅ **Function to Filter Out Hindi & Gibberish**
def clean_text(text):
    lines = text.split("\n")
    cleaned_lines = []
    aadhaar_number = None
    pan_number = None
    dob = None

    for line in lines:
        line = line.strip()

        # ✅ Ignore empty lines
        if not line:
            continue

        # ✅ Remove Hindi text
        if re.search(r'[\u0900-\u097F]', line):
            continue

        # ✅ Remove lines with excessive special characters
        if re.fullmatch(r"[^A-Za-z0-9\s/]+", line):
            continue

        # ✅ Extract Aadhaar number (12-digit)
        aadhaar_match = re.fullmatch(r"\d{4}\s\d{4}\s\d{4}", line)
        if aadhaar_match:
            aadhaar_number = aadhaar_match.group().replace(" ", "")
            cleaned_lines.append("Aadhaar No: " + aadhaar_match.group())
            continue

        # ✅ Extract PAN number (XXXXX0000X)
        pan_match = re.fullmatch(r"[A-Z]{5}\d{4}[A-Z]", line)
        if pan_match:
            pan_number = pan_match.group()
            cleaned_lines.append("PAN No: " + pan_match.group())
            continue

        # ✅ Extract DOB (DD/MM/YYYY)
        dob_match = re.search(r"\b\d{2}/\d{2}/\d{4}\b", line)
        if dob_match:
            dob = dob_match.group()
            cleaned_lines.append("DOB: " + dob)
            continue

        # ✅ Keep valid names (Assumes names have vowels and are multi-word)
        words = line.split()
        vowels = sum(1 for char in line.lower() if char in "aeiou")
        if len(words) >= 2 and vowels >= 3:
            cleaned_lines.append(line)
            continue

    return "\n".join(cleaned_lines), aadhaar_number, pan_number, dob

# ✅ **Apply text cleaning**
final_text, aadhaar_number, pan_number, dob = clean_text(raw_text)

# ✅ **Print Cleaned Extracted Text**
print("\n✅ Cleaned Extracted Text (No Hindi, No Gibberish):\n")
print(final_text)

# ✅ **Final Verification**
def verify_id(aadhaar=None, pan=None):
    if aadhaar:
        if re.fullmatch(r"\d{12}", aadhaar):
            print(f"✅ Aadhaar {aadhaar} is VALID ✅")
        else:
            print(f"❌ Aadhaar {aadhaar} is INVALID ❌")

    if pan:
        if re.fullmatch(r"[A-Z]{5}\d{4}[A-Z]", pan):
            print(f"✅ PAN {pan} is VALID ✅")
        else:
            print(f"❌ PAN {pan} is INVALID ❌")

verify_id(aadhaar=aadhaar_number, pan=pan_number)